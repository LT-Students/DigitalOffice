// <auto-generated />
using System;
using CheckRightsService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CheckRightsService.Migrations
{
    [DbContext(typeof(CheckRightsServiceDbContext))]
    partial class CheckRightsServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.6.20312.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CheckRightsService.Database.Entities.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("CheckRightsService.Database.Entities.RightChangeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RightsHistory");
                });

            modelBuilder.Entity("CheckRightsService.Database.Entities.RightChangeRecordProjectLink", b =>
                {
                    b.Property<Guid>("RightChangeRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RightChangeRecordId", "ProjectId");

                    b.ToTable("RightChangeRecordProjectLink");
                });

            modelBuilder.Entity("CheckRightsService.Database.Entities.RightProjectLink", b =>
                {
                    b.Property<Guid>("RightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RightId", "ProjectId");

                    b.ToTable("RightProjectLinks");
                });

            modelBuilder.Entity("CheckRightsService.Database.Entities.RightChangeRecordProjectLink", b =>
                {
                    b.HasOne("CheckRightsService.Database.Entities.RightChangeRecord", "RightChangeRecord")
                        .WithMany("ChangedPermissionsIds")
                        .HasForeignKey("RightChangeRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckRightsService.Database.Entities.RightProjectLink", b =>
                {
                    b.HasOne("CheckRightsService.Database.Entities.Right", "Right")
                        .WithMany("PermissionsIds")
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
